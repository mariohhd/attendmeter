---
import Thermometer from './Thermometer.astro'
import type { Course, AttendanceStats } from '../types/attendance'

interface Props {
  course: Course
  stats: AttendanceStats
}

const { course, stats } = Astro.props
---

<div class="course-card" data-course-id={course.id}>
  <div class="course-header" style={`border-color: ${course.color}`}>
    <h3 class="course-name">{course.name}</h3>
    <div class="course-stats">
      <span class="stat-item">
        {stats.attendedSessions} / {stats.totalSessions} classes
      </span>
      <span class="stat-item missed">
        {stats.missedSessions} missed
      </span>
    </div>
  </div>

  <div class="course-content">
    <div class="thermometer-section">
      <Thermometer 
        percentage={stats.attendancePercentage}
        label={course.name}
        target={course.target}
        height={180}
      />
    </div>

    <div class="sessions-section">
      <div class="sessions-header">
        <h4>Recent Sessions</h4>
        <button class="add-session-btn" data-course-id={course.id}>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Add Session
        </button>
      </div>

      <div class="sessions-list">
        {course.sessions.slice(0, 5).map(session => (
          <div class="session-item" data-session-id={session.id}>
            <div class="session-date">
              {new Date(session.date).toLocaleDateString()}
            </div>
            <div class="session-status">
              <button 
                class={`status-toggle ${session.attended ? 'attended' : 'missed'}`}
                data-course-id={course.id}
                data-session-id={session.id}
                data-attended={session.attended}
              >
                {session.attended ? '✓ Present' : '✗ Absent'}
              </button>
            </div>
            {session.notes && (
              <div class="session-notes">{session.notes}</div>
            )}
          </div>
        ))}
        {course.sessions.length === 0 && (
          <div class="no-sessions">
            No sessions recorded yet. Click "Add Session" to get started!
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .course-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .course-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }

  .course-header {
    padding: 1.5rem;
    border-left: 4px solid #6366f1;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }

  .course-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1e293b;
    margin: 0 0 0.5rem 0;
  }

  .course-stats {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .stat-item {
    font-size: 0.875rem;
    color: #64748b;
    font-weight: 500;
  }

  .stat-item.missed {
    color: #dc2626;
  }

  .course-content {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 2rem;
    padding: 1.5rem;
  }

  .thermometer-section {
    display: flex;
    justify-content: center;
  }

  .sessions-section {
    min-width: 0;
  }

  .sessions-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .sessions-header h4 {
    font-size: 1rem;
    font-weight: 600;
    color: #374151;
    margin: 0;
  }

  .add-session-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: #6366f1;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .add-session-btn:hover {
    background: #4f46e5;
  }

  .sessions-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .session-item {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 1rem;
    align-items: center;
    padding: 0.75rem;
    background: #f8fafc;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
  }

  .session-date {
    font-size: 0.875rem;
    font-weight: 500;
    color: #475569;
    min-width: 100px;
  }

  .session-status {
    display: flex;
    justify-content: flex-end;
  }

  .status-toggle {
    padding: 0.375rem 0.75rem;
    border: none;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .status-toggle.attended {
    background: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }

  .status-toggle.attended:hover {
    background: #bbf7d0;
  }

  .status-toggle.missed {
    background: #fef2f2;
    color: #991b1b;
    border: 1px solid #fecaca;
  }

  .status-toggle.missed:hover {
    background: #fecaca;
  }

  .session-notes {
    grid-column: 1 / -1;
    font-size: 0.875rem;
    color: #6b7280;
    font-style: italic;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #f1f5f9;
    border-radius: 4px;
  }

  .no-sessions {
    text-align: center;
    padding: 2rem;
    color: #9ca3af;
    font-style: italic;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .course-content {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .session-item {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .session-status {
      justify-content: flex-start;
    }

    .sessions-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: stretch;
    }
  }
</style>