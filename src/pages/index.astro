---
import Layout from '../layouts/Layout.astro'
import CourseCard from '../components/CourseCard.astro'
import EOICourseCard from '../components/EOICourseCard.astro'
import EOICourseForm from '../components/EOICourseForm.astro'
import type { Course, EOICourse } from '../types/attendance'
import { calculateAttendanceStats, calculateEOIStats } from '../utils/attendance'
import { 
  generateAcademicCalendar, 
  generateScheduledSessions, 
  SPANISH_HOLIDAYS_2024_2025 
} from '../utils/eoi-calendar'

// Sample EOI course for demonstration
const sampleEOICourse: EOICourse = {
  id: 'eoi_course_1',
  name: 'InglÃ©s B2',
  color: '#3b82f6',
  totalSessions: 60,
  target: 85,
  level: 'B2',
  language: 'InglÃ©s',
  teacher: 'MarÃ­a GonzÃ¡lez',
  classroom: '201',
  schedule: {
    days: [1, 3], // Lunes y MiÃ©rcoles
    startTime: '18:00',
    endTime: '20:00'
  },
  academicCalendar: generateAcademicCalendar(
    new Date('2024-09-15'),
    new Date('2025-06-15'),
    [1, 3], // Lunes y MiÃ©rcoles
    SPANISH_HOLIDAYS_2024_2025
  ),
  sessions: [] // Se generarÃ¡n automÃ¡ticamente
}

// Generate sample sessions for the EOI course
const generateSessionId = () => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
sampleEOICourse.sessions = generateScheduledSessions(sampleEOICourse.academicCalendar, generateSessionId)

// Mark some sessions as attended for demo
sampleEOICourse.sessions.slice(0, 15).forEach((session, index) => {
  if (session.sessionType === 'regular' && index % 3 !== 0) {
    session.attended = true
  }
})

// Sample regular courses for demonstration
const sampleCourses: Course[] = [
  {
    id: 'course_1',
    name: 'Mathematics 101',
    color: '#10b981',
    totalSessions: 20,
    target: 85,
    sessions: [
      {
        id: 'session_1',
        date: new Date('2024-10-01'),
        attended: true,
        notes: 'Introduction to Calculus'
      },
      {
        id: 'session_2',
        date: new Date('2024-10-03'),
        attended: true
      },
      {
        id: 'session_3',
        date: new Date('2024-10-05'),
        attended: false,
        notes: 'Sick day'
      },
      {
        id: 'session_4',
        date: new Date('2024-10-08'),
        attended: true
      },
      {
        id: 'session_5',
        date: new Date('2024-10-10'),
        attended: true
      }
    ]
  }
]
---

<Layout title="AttendMeter - Controla tu Asistencia a Clases">
  <main class="app-container">
    <header class="app-header">
      <div class="header-content">
        <h1 class="app-title">
          <span class="title-icon">ðŸ“Š</span>
          AttendMeter
        </h1>
        <p class="app-subtitle">
          Controla tu asistencia a clases con indicadores visuales de progreso
          <br />
          <small>ðŸŽ“ Especializado para EOI - Cumple el requisito del 65% de asistencia</small>
        </p>
        
        <div class="header-actions">
          <button id="add-eoi-course-btn" class="primary-btn">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
            Crear Curso EOI
          </button>
          <button id="add-course-btn" class="secondary-btn">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="12" y1="5" x2="12" y2="19"></line>
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Curso General
          </button>
          <button id="export-btn" class="tertiary-btn">Exportar Datos</button>
        </div>
      </div>
    </header>

    <!-- Course Type Tabs -->
    <div class="course-tabs">
      <button class="tab-btn active" data-tab="eoi">
        ðŸŽ“ Cursos EOI
      </button>
      <button class="tab-btn" data-tab="general">
        ðŸ“š Cursos Generales
      </button>
    </div>

    <!-- EOI Courses Section -->
    <div class="courses-container" id="eoi-courses-container">
      <div class="courses-grid eoi-grid">
        {(() => {
          const eoiStats = calculateEOIStats(sampleEOICourse)
          return <EOICourseCard course={sampleEOICourse} stats={eoiStats} />
        })()}
      </div>
      
      <div class="empty-state eoi-empty" id="eoi-empty-state" style="display: none;">
        <div class="empty-icon">ðŸŽ“</div>
        <h3>No hay cursos EOI</h3>
        <p>Crea tu primer curso de la Escuela Oficial de Idiomas para comenzar a rastrear tu asistencia</p>
        <button class="primary-btn" onclick="document.getElementById('add-eoi-course-btn')?.click()">
          Crear Curso EOI
        </button>
      </div>
    </div>

    <!-- General Courses Section -->
    <div class="courses-container" id="general-courses-container" style="display: none;">
      <div class="courses-grid">
        {sampleCourses.map(course => {
          const stats = calculateAttendanceStats(course)
          return (
            <CourseCard course={course} stats={stats} />
          )
        })}
      </div>
      
      <div class="empty-state" id="general-empty-state" style="display: none;">
        <div class="empty-icon">ðŸ“š</div>
        <h3>No hay cursos generales</h3>
        <p>AÃ±ade tu primer curso para comenzar a rastrear la asistencia</p>
        <button class="primary-btn" onclick="document.getElementById('add-course-btn')?.click()">
          AÃ±adir Primer Curso
        </button>
      </div>
    </div>

    <!-- EOI Course Form -->
    <EOICourseForm isVisible={false} />

    <!-- Add Course Modal -->
    <div id="add-course-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>AÃ±adir Nuevo Curso</h3>
          <button class="modal-close" id="close-modal">&times;</button>
        </div>
        <form id="add-course-form" class="modal-form">
          <div class="form-group">
            <label for="course-name">Nombre del Curso</label>
            <input type="text" id="course-name" name="courseName" required placeholder="ej: MatemÃ¡ticas Avanzadas">
          </div>
          <div class="form-group">
            <label for="course-color">Color</label>
            <select id="course-color" name="courseColor">
              <option value="#3b82f6">Azul</option>
              <option value="#10b981">Verde</option>
              <option value="#f59e0b">Amarillo</option>
              <option value="#ef4444">Rojo</option>
              <option value="#8b5cf6">Morado</option>
              <option value="#f97316">Naranja</option>
            </select>
          </div>
          <div class="form-group">
            <label for="course-target">Objetivo de Asistencia % (opcional)</label>
            <input type="number" id="course-target" name="courseTarget" min="0" max="100" placeholder="85">
          </div>
          <div class="form-actions">
            <button type="button" class="secondary-btn" id="cancel-add-course">Cancelar</button>
            <button type="submit" class="primary-btn">AÃ±adir Curso</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Add Session Modal -->
    <div id="add-session-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>AÃ±adir SesiÃ³n</h3>
          <button class="modal-close" id="close-session-modal">&times;</button>
        </div>
        <form id="add-session-form" class="modal-form">
          <div class="form-group">
            <label for="session-date">Fecha</label>
            <input type="date" id="session-date" name="sessionDate" required>
          </div>
          <div class="form-group">
            <label for="session-attended">Asistencia</label>
            <select id="session-attended" name="sessionAttended">
              <option value="true">Presente</option>
              <option value="false">Ausente</option>
            </select>
          </div>
          <div class="form-group">
            <label for="session-notes">Notas (opcional)</label>
            <input type="text" id="session-notes" name="sessionNotes" placeholder="ej: DÃ­a de examen, Conferencia especial">
          </div>
          <div class="form-actions">
            <button type="button" class="secondary-btn" id="cancel-add-session">Cancelar</button>
            <button type="submit" class="primary-btn">AÃ±adir SesiÃ³n</button>
          </div>
        </form>
      </div>
    </div>
  </main>
</Layout>

<style>
  /* Import global styles */
  @import '../styles/global.css';

  /* Course Type Tabs */
  .course-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 2rem;
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .tab-btn {
    flex: 1;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    background: transparent;
    color: #64748b;
  }

  .tab-btn.active {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
  }

  .tab-btn:hover:not(.active) {
    background: #f1f5f9;
    color: #334155;
  }

  /* Enhanced header */
  .app-subtitle small {
    display: block;
    margin-top: 0.5rem;
    color: #059669;
    font-weight: 600;
  }

  /* Button variations */
  .tertiary-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    background: white;
    color: #6b7280;
  }

  .tertiary-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
    color: #374151;
  }

  /* EOI specific styling */
  .eoi-grid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }

  .eoi-empty {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    border: 2px dashed #0ea5e9;
  }

  .eoi-empty .empty-icon {
    color: #0ea5e9;
  }

  /* Courses container */
  .courses-container {
    margin-bottom: 2rem;
  }

  .courses-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
    gap: 2rem;
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .modal.show {
    display: flex;
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 16px 64px rgba(0, 0, 0, 0.2);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #6b7280;
    cursor: pointer;
    padding: 0;
    line-height: 1;
  }

  .modal-close:hover {
    color: #374151;
  }

  .modal-form {
    padding: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #374151;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
  }

  .form-group input:focus,
  .form-group select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .course-tabs {
      flex-direction: column;
    }
    
    .courses-grid {
      grid-template-columns: 1fr;
    }
    
    .header-actions {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .form-actions {
      flex-direction: column-reverse;
    }
  }

  /* Animation */
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .courses-container {
    animation: slideUp 0.5s ease-out;
  }
</style>

<script>
  import type { EOICourse } from '../types/attendance'
  import { calculateEOIStats } from '../utils/attendance'
  import { 
    generateAcademicCalendar, 
    generateScheduledSessions, 
    SPANISH_HOLIDAYS_2024_2025 
  } from '../utils/eoi-calendar'

  // Initialize the app when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeApp()
    setupEventListeners()
    setupTabSwitching()
    showSampleData()
  })

  function initializeApp() {
    // Set today's date as default for session date
    const sessionDateInput = document.getElementById('session-date') as HTMLInputElement
    if (sessionDateInput) {
      sessionDateInput.valueAsDate = new Date()
    }

    // Set default dates for EOI course form
    const eoiStartDate = document.getElementById('eoi-start-date') as HTMLInputElement
    const eoiEndDate = document.getElementById('eoi-end-date') as HTMLInputElement
    
    if (eoiStartDate && eoiEndDate) {
      const today = new Date()
      const startOfYear = new Date(today.getFullYear(), 8, 15) // 15 septiembre
      const endOfYear = new Date(today.getFullYear() + 1, 5, 15) // 15 junio siguiente
      
      eoiStartDate.valueAsDate = startOfYear
      eoiEndDate.valueAsDate = endOfYear
    }

    // Pre-select Monday and Wednesday for EOI
    const mondayCheckbox = document.getElementById('day-monday') as HTMLInputElement
    const wednesdayCheckbox = document.getElementById('day-wednesday') as HTMLInputElement
    
    if (mondayCheckbox) mondayCheckbox.checked = true
    if (wednesdayCheckbox) wednesdayCheckbox.checked = true
  }

  function setupTabSwitching() {
    const tabButtons = document.querySelectorAll('.tab-btn')
    const eoiContainer = document.getElementById('eoi-courses-container')
    const generalContainer = document.getElementById('general-courses-container')

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tab = button.getAttribute('data-tab')
        
        // Update active tab
        tabButtons.forEach(btn => btn.classList.remove('active'))
        button.classList.add('active')
        
        // Show/hide containers
        if (tab === 'eoi') {
          eoiContainer!.style.display = 'block'
          generalContainer!.style.display = 'none'
        } else {
          eoiContainer!.style.display = 'none'
          generalContainer!.style.display = 'block'
        }
      })
    })
  }

  function setupEventListeners() {
    // EOI course modal
    const addEOICourseBtn = document.getElementById('add-eoi-course-btn')
    const eoiCourseModal = document.getElementById('eoi-course-modal')
    const closeEOIModal = document.getElementById('close-eoi-modal')
    const cancelEOICourse = document.getElementById('cancel-eoi-course')

    addEOICourseBtn?.addEventListener('click', () => {
      eoiCourseModal?.classList.add('show')
    })

    closeEOIModal?.addEventListener('click', () => {
      eoiCourseModal?.classList.remove('show')
    })

    cancelEOICourse?.addEventListener('click', () => {
      eoiCourseModal?.classList.remove('show')
    })

    // Regular course modal
    const addCourseBtn = document.getElementById('add-course-btn')
    const addCourseModal = document.getElementById('add-course-modal')
    const closeModal = document.getElementById('close-modal')
    const cancelAddCourse = document.getElementById('cancel-add-course')

    addCourseBtn?.addEventListener('click', () => {
      addCourseModal?.classList.add('show')
    })

    closeModal?.addEventListener('click', () => {
      addCourseModal?.classList.remove('show')
    })

    cancelAddCourse?.addEventListener('click', () => {
      addCourseModal?.classList.remove('show')
    })

    // Session modal
    const addSessionModal = document.getElementById('add-session-modal')
    const closeSessionModal = document.getElementById('close-session-modal')
    const cancelAddSession = document.getElementById('cancel-add-session')

    closeSessionModal?.addEventListener('click', () => {
      addSessionModal?.classList.remove('show')
    })

    cancelAddSession?.addEventListener('click', () => {
      addSessionModal?.classList.remove('show')
    })

    // Export data functionality
    const exportBtn = document.getElementById('export-btn')
    exportBtn?.addEventListener('click', () => {
      const data = {
        courses: [],
        eoiCourses: [],
        exportDate: new Date().toISOString(),
        appVersion: '2.0.0'
      }
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `attendmeter-eoi-backup-${new Date().toISOString().split('T')[0]}.json`
      a.click()
      URL.revokeObjectURL(url)
    })

    // Close modals when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement
      if (target.classList.contains('modal')) {
        target.classList.remove('show')
      }
    })

    // Handle EOI form submission
    const eoiForm = document.getElementById('eoi-course-form')
    eoiForm?.addEventListener('submit', handleEOICourseCreation)
  }

  function handleEOICourseCreation(e: Event) {
    e.preventDefault()
    const form = e.target as HTMLFormElement
    const formData = new FormData(form)
    
    // Get form values
    const language = formData.get('language') as string
    const level = formData.get('level') as string
    const teacher = formData.get('teacher') as string
    const classroom = formData.get('classroom') as string
    const color = formData.get('color') as string
    const target = parseInt(formData.get('target') as string) || 85
    const startTime = formData.get('startTime') as string
    const endTime = formData.get('endTime') as string
    const startDate = new Date(formData.get('startDate') as string)
    const endDate = new Date(formData.get('endDate') as string)
    
    // Get selected days
    const classDays = Array.from(formData.getAll('classDays')).map(day => parseInt(day as string))
    
    if (classDays.length === 0) {
      alert('Por favor selecciona al menos un dÃ­a de clase')
      return
    }

    // Create the course name
    const courseName = `${language} ${level}`

    console.log('Creando curso EOI:', {
      name: courseName,
      language,
      level,
      teacher,
      classroom,
      color,
      target,
      schedule: { days: classDays, startTime, endTime },
      period: { startDate, endDate }
    })

    // Here you would normally save to localStorage or send to a server
    alert(`Â¡Curso EOI "${courseName}" creado exitosamente!\n\nProfesor: ${teacher}\nHorario: ${classDays.map(d => ['Dom','Lun','Mar','MiÃ©','Jue','Vie','SÃ¡b'][d]).join(' y ')} ${startTime}-${endTime}\nPeriodo: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`)

    form.reset()
    document.getElementById('eoi-course-modal')?.classList.remove('show')
  }

  function showSampleData() {
    console.log('AttendMeter EOI app initialized with sample data')
    console.log('Features available:')
    console.log('- Smart attendance calculation (excludes holidays/teacher absences)')
    console.log('- EOI compliance tracking (65% minimum)')
    console.log('- Automatic calendar generation')
    console.log('- Monthly progress tracking')
  }
</script>
